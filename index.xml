<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>暗夜零星</title>
        <link>https://wlizhi.cc/</link>
        <description>这是我的博客</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>wlizhicc@163.com (Wlizhi)</managingEditor>
            <webMaster>wlizhicc@163.com (Wlizhi)</webMaster><lastBuildDate>Mon, 07 Dec 2020 14:14:56 &#43;0800</lastBuildDate>
            <atom:link href="https://wlizhi.cc/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>20 事务提交流程的扩展-TransactionSynchronization</title>
    <link>https://wlizhi.cc/posts/spring/20-transaction-extention-transaction-synchronization/</link>
    <pubDate>Mon, 07 Dec 2020 14:14:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/20-transaction-extention-transaction-synchronization/</guid>
    <description><![CDATA[事务提交前后是可以自定义一些逻辑，嵌入到事务提交的流程中的，通过spring-tx包提供的TransactionSynchronization类、使用TransactionSynchronizationManager的静态方法registerSynchronization() 或者使用注解方式均可。]]></description>
</item><item>
    <title>19 事务的挂起、提交、回滚、连接的释放原理</title>
    <link>https://wlizhi.cc/posts/spring/19-transaction-source-suspend-rollback-commit/</link>
    <pubDate>Mon, 07 Dec 2020 10:43:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/19-transaction-source-suspend-rollback-commit/</guid>
    <description><![CDATA[事务的挂起、提交、回滚源码分析]]></description>
</item><item>
    <title>18 事务注解@Transaction的解析原理</title>
    <link>https://wlizhi.cc/posts/spring/18-transaction-source-ano-supports/</link>
    <pubDate>Mon, 07 Dec 2020 09:18:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/18-transaction-source-ano-supports/</guid>
    <description><![CDATA[事务注解 @Transaction 的支持，扫描原理。]]></description>
</item><item>
    <title>17 声明式事务执行流程源码分析</title>
    <link>https://wlizhi.cc/posts/spring/17-transaction-source-process/</link>
    <pubDate>Sun, 06 Dec 2020 14:28:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/17-transaction-source-process/</guid>
    <description><![CDATA[事务执行的主要流程源码分析]]></description>
</item><item>
    <title>16 声明式事务注意事项</title>
    <link>https://wlizhi.cc/posts/spring/16-transaction-declare-attention/</link>
    <pubDate>Sat, 05 Dec 2020 18:30:10 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/16-transaction-declare-attention/</guid>
    <description><![CDATA[详细描述不正确使用声明式事务的危害，像本类自调用问题、事务方法嵌套等。]]></description>
</item><item>
    <title>15 声明式事务七种传播行为的表现形式案例</title>
    <link>https://wlizhi.cc/posts/spring/15-transaction-propagation-example/</link>
    <pubDate>Sat, 05 Dec 2020 09:49:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/15-transaction-propagation-example/</guid>
    <description><![CDATA[spring声明式事务的传播行为，严格来说是spring特有的，数据库本身并没有这个概念。本文会列举出spring事务其中传播行为，以案例的方式展示不同的传播行为的表现是怎样的。]]></description>
</item><item>
    <title>14 声明式事务中XML配置及注解方式的注册入口</title>
    <link>https://wlizhi.cc/posts/spring/14-transaction-xml-annotation-registry/</link>
    <pubDate>Thu, 03 Dec 2020 11:06:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/14-transaction-xml-annotation-registry/</guid>
    <description><![CDATA[事务以xml配置方式使用时，xml是怎么解析，并将事务功能注册到容器中的？注解方式启动时，是怎么扫描注解将事务功能注册到容器中的？本文给出了详细的解析。]]></description>
</item><item>
    <title>13 AOP MethodInterceptor执行原理</title>
    <link>https://wlizhi.cc/posts/spring/13-aop-method-interceptor-execute/</link>
    <pubDate>Wed, 02 Dec 2020 10:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/13-aop-method-interceptor-execute/</guid>
    <description><![CDATA[AOP中代理方法执行时，自定义切面通知方法的MethodInterceptor执行原理解析。]]></description>
</item><item>
    <title>12 AOP 执行链的创建和执行原理</title>
    <link>https://wlizhi.cc/posts/spring/12-aop-proxy-execute-processor/</link>
    <pubDate>Tue, 01 Dec 2020 20:34:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/12-aop-proxy-execute-processor/</guid>
    <description><![CDATA[AOP 中代理对象生成后，在调用代理方法时，以 JDK 动态代理为例，执行链的生成、执行链火炬传递式的调用源码解析。]]></description>
</item><item>
    <title>11 AOP 代理实例的创建</title>
    <link>https://wlizhi.cc/posts/spring/11-aop-proxy-create-processor/</link>
    <pubDate>Tue, 01 Dec 2020 13:48:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/11-aop-proxy-create-processor/</guid>
    <description><![CDATA[AOP 代理实例的创建]]></description>
</item></channel>
</rss>
