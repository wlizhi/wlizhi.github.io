<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>暗夜零星</title>
        <link>https://wlizhi.cc/</link>
        <description>暗夜零星，java程序员。这里是我的个人博客，交流技术，分享经验。</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>wlizhicc@163.com (Wlizhi)</managingEditor>
            <webMaster>wlizhicc@163.com (Wlizhi)</webMaster><lastBuildDate>Sun, 14 Mar 2021 18:49:18 &#43;0800</lastBuildDate>
            <atom:link href="https://wlizhi.cc/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>事务、非事务状态获取、释放连接的区别</title>
    <link>https://wlizhi.cc/posts/spring/transaction-attention/</link>
    <pubDate>Sun, 14 Mar 2021 18:49:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/transaction-attention/</guid>
    <description><![CDATA[<p>spring声明式事务使用时如果不注意，很容易造成连接佣金而导致线程阻塞。</p>]]></description>
</item><item>
    <title>自定义分布式可重入锁</title>
    <link>https://wlizhi.cc/posts/concurrent/reentrant-distributed-lock/</link>
    <pubDate>Tue, 19 Jan 2021 10:24:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/concurrent/reentrant-distributed-lock/</guid>
    <description><![CDATA[基于redis原子操作、ReentrantLock（进程内独占锁）实现的一个分布式可重入锁]]></description>
</item><item>
    <title>04 Mybatis 缓存的实现原理</title>
    <link>https://wlizhi.cc/posts/mybatis/04-mybatis-cache/</link>
    <pubDate>Wed, 30 Dec 2020 17:08:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/mybatis/04-mybatis-cache/</guid>
    <description><![CDATA[mybatis 缓存模块的实现，源码分析。]]></description>
</item><item>
    <title>03 Mybatis 连接池的实现原理</title>
    <link>https://wlizhi.cc/posts/mybatis/03-mybatis-pooled-data-source/</link>
    <pubDate>Sun, 20 Dec 2020 16:12:43 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/mybatis/03-mybatis-pooled-data-source/</guid>
    <description><![CDATA[mybatis 连接池的实现源码、原理解析。]]></description>
</item><item>
    <title>02 Mybatis Log 源码分析</title>
    <link>https://wlizhi.cc/posts/mybatis/02-mybatis-log/</link>
    <pubDate>Sun, 20 Dec 2020 10:02:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/mybatis/02-mybatis-log/</guid>
    <description><![CDATA[mybatis log 的实现源码、原理解析。]]></description>
</item><item>
    <title>01 Mybatis整体架构及开发设计原则</title>
    <link>https://wlizhi.cc/posts/mybatis/01-mybatis-structure/</link>
    <pubDate>Sun, 20 Dec 2020 09:59:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/mybatis/01-mybatis-structure/</guid>
    <description><![CDATA[mybatis 整体架构列举，java中开发原则概述。]]></description>
</item><item>
    <title>27 DispatcherServlet具体业务方法的调用</title>
    <link>https://wlizhi.cc/posts/spring/27-dispatcher-servlet-handler-adapter-handle/</link>
    <pubDate>Thu, 17 Dec 2020 10:09:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/27-dispatcher-servlet-handler-adapter-handle/</guid>
    <description><![CDATA[DispatcherServlet.doDispatch()中，具体业务方法是通过HandlerAdapter.handle()来调用的，本文性详细列举handle()的实现流程。]]></description>
</item><item>
    <title>26 DispatcherServlet 处理请求的核心流程</title>
    <link>https://wlizhi.cc/posts/spring/26-dispatcher-servlet-core-process/</link>
    <pubDate>Wed, 16 Dec 2020 19:30:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/26-dispatcher-servlet-core-process/</guid>
    <description><![CDATA[在 springmvc 中，所有的请求都会交给 DispatcherServlet 处理，由 DispatcherServlet 分发给下游组件，进行具体的处理。本文详细罗列出 DispatcherServlet 在处理请求时的核心流程，源码的流转。]]></description>
</item><item>
    <title>25 RequestMappingHandlerMapping和RequestMappingHandlerAdapter初始化</title>
    <link>https://wlizhi.cc/posts/spring/25-request-mapping-and-adapter-init/</link>
    <pubDate>Wed, 16 Dec 2020 17:11:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/25-request-mapping-and-adapter-init/</guid>
    <description><![CDATA[在@EnableWebMvc注解，激活mvc的一些组件时，其中就创建了 RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter。这两个类也是 InitializingBean 的实现，所以在创建后会调用 afterPropertiesSet() 初始化。]]></description>
</item><item>
    <title>Spring缓存管理器多级缓存的实现</title>
    <link>https://wlizhi.cc/posts/spring/layering-cache/</link>
    <pubDate>Wed, 16 Dec 2020 00:07:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://wlizhi.cc/posts/spring/layering-cache/</guid>
    <description><![CDATA[<p>大概今年9月份，在对接抖音抖店 api 时，写的一个多级缓存的实现，本地缓存基于guava。如果需要使用，直接将这些类copy过去就可以。或者这些类抽取到单独的模块，自定义一个 autoconfigurer、start包，就可以无缝整合到 springboot，导包即可自动配置。</p>]]></description>
</item></channel>
</rss>
